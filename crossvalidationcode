{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "79d1c1d9",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-05-14T11:23:34.475783Z",
     "iopub.status.busy": "2025-05-14T11:23:34.475409Z",
     "iopub.status.idle": "2025-05-14T11:26:04.182190Z",
     "shell.execute_reply": "2025-05-14T11:26:04.180997Z"
    },
    "papermill": {
     "duration": 149.713639,
     "end_time": "2025-05-14T11:26:04.183736",
     "exception": false,
     "start_time": "2025-05-14T11:23:34.470097",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Loading data...\n",
      "Found 469 files.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 469/469 [00:05<00:00, 87.65it/s]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Original data shape: (469, 132, 976)\n",
      "Extracting statistical features...\n",
      "Extracting wavelet features...\n",
      "Extracting cross-channel features...\n",
      "Final feature shape: (469, 4358)\n",
      "Selected 2179 features out of 4358\n",
      "Class distribution:\n",
      "Class 0: 193 (41.15%)\n",
      "Class 1: 276 (58.85%)\n",
      "\n",
      "Training and evaluating initial model...\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/torch/optim/lr_scheduler.py:62: UserWarning: The verbose parameter is deprecated. Please use get_last_lr() to access the learning rate.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/200 - Train Loss: 0.6263, Val Loss: 0.6077, Accuracy: 0.5426, AUC: 0.5305\n",
      "Epoch 2/200 - Train Loss: 0.6194, Val Loss: 0.6165, Accuracy: 0.6170, AUC: 0.5930\n",
      "Epoch 3/200 - Train Loss: 0.5941, Val Loss: 0.6108, Accuracy: 0.6277, AUC: 0.6182\n",
      "Epoch 4/200 - Train Loss: 0.5772, Val Loss: 0.6774, Accuracy: 0.6170, AUC: 0.6098\n",
      "Epoch 5/200 - Train Loss: 0.5814, Val Loss: 0.6458, Accuracy: 0.6383, AUC: 0.6490\n",
      "Epoch 6/200 - Train Loss: 0.5174, Val Loss: 0.6227, Accuracy: 0.6489, AUC: 0.6550\n",
      "Epoch 7/200 - Train Loss: 0.5353, Val Loss: 0.6662, Accuracy: 0.6277, AUC: 0.6545\n",
      "Epoch 8/200 - Train Loss: 0.5420, Val Loss: 0.5726, Accuracy: 0.6489, AUC: 0.6653\n",
      "Epoch 9/200 - Train Loss: 0.5148, Val Loss: 0.5879, Accuracy: 0.6596, AUC: 0.6811\n",
      "Epoch 10/200 - Train Loss: 0.5157, Val Loss: 0.6211, Accuracy: 0.6064, AUC: 0.6783\n",
      "Epoch 11/200 - Train Loss: 0.4856, Val Loss: 0.6457, Accuracy: 0.6170, AUC: 0.6695\n",
      "Epoch 12/200 - Train Loss: 0.4954, Val Loss: 0.5884, Accuracy: 0.6277, AUC: 0.7249\n",
      "Epoch 13/200 - Train Loss: 0.5120, Val Loss: 0.5916, Accuracy: 0.6596, AUC: 0.7128\n",
      "Epoch 14/200 - Train Loss: 0.4979, Val Loss: 0.5942, Accuracy: 0.6383, AUC: 0.6797\n",
      "Epoch 15/200 - Train Loss: 0.4806, Val Loss: 0.5999, Accuracy: 0.6383, AUC: 0.7170\n",
      "Epoch 16/200 - Train Loss: 0.5045, Val Loss: 0.5984, Accuracy: 0.6596, AUC: 0.7124\n",
      "Epoch 17/200 - Train Loss: 0.5156, Val Loss: 0.5797, Accuracy: 0.6596, AUC: 0.7138\n",
      "Epoch 18/200 - Train Loss: 0.4783, Val Loss: 0.5971, Accuracy: 0.6170, AUC: 0.7091\n",
      "Epoch 19/200 - Train Loss: 0.4743, Val Loss: 0.5958, Accuracy: 0.6383, AUC: 0.7501\n",
      "Epoch 20/200 - Train Loss: 0.4997, Val Loss: 0.6161, Accuracy: 0.6277, AUC: 0.7021\n",
      "Epoch 21/200 - Train Loss: 0.4595, Val Loss: 0.6160, Accuracy: 0.6277, AUC: 0.7152\n",
      "Epoch 22/200 - Train Loss: 0.4429, Val Loss: 0.5818, Accuracy: 0.6383, AUC: 0.7413\n",
      "Epoch 23/200 - Train Loss: 0.4636, Val Loss: 0.5819, Accuracy: 0.6702, AUC: 0.7319\n",
      "Epoch 24/200 - Train Loss: 0.4384, Val Loss: 0.5803, Accuracy: 0.6489, AUC: 0.7301\n",
      "Epoch 25/200 - Train Loss: 0.4522, Val Loss: 0.5800, Accuracy: 0.6596, AUC: 0.7133\n",
      "Epoch 26/200 - Train Loss: 0.4504, Val Loss: 0.5690, Accuracy: 0.6489, AUC: 0.7063\n",
      "Epoch 27/200 - Train Loss: 0.4207, Val Loss: 0.5964, Accuracy: 0.6489, AUC: 0.7138\n",
      "Epoch 28/200 - Train Loss: 0.4490, Val Loss: 0.5816, Accuracy: 0.6596, AUC: 0.7063\n",
      "Epoch 29/200 - Train Loss: 0.4609, Val Loss: 0.5791, Accuracy: 0.6383, AUC: 0.7133\n",
      "Epoch 30/200 - Train Loss: 0.4271, Val Loss: 0.5935, Accuracy: 0.6702, AUC: 0.6895\n",
      "Epoch 31/200 - Train Loss: 0.4328, Val Loss: 0.6127, Accuracy: 0.6489, AUC: 0.6998\n",
      "Epoch 32/200 - Train Loss: 0.4347, Val Loss: 0.5843, Accuracy: 0.6702, AUC: 0.7152\n",
      "Epoch 33/200 - Train Loss: 0.4521, Val Loss: 0.5972, Accuracy: 0.6489, AUC: 0.7175\n",
      "Epoch 34/200 - Train Loss: 0.4534, Val Loss: 0.6028, Accuracy: 0.6809, AUC: 0.7068\n",
      "Epoch 35/200 - Train Loss: 0.4522, Val Loss: 0.6116, Accuracy: 0.6383, AUC: 0.7147\n",
      "Epoch 36/200 - Train Loss: 0.4390, Val Loss: 0.5806, Accuracy: 0.6489, AUC: 0.7002\n",
      "Epoch 37/200 - Train Loss: 0.4323, Val Loss: 0.5941, Accuracy: 0.6277, AUC: 0.6974\n",
      "Epoch 38/200 - Train Loss: 0.4426, Val Loss: 0.6087, Accuracy: 0.6702, AUC: 0.7072\n",
      "Epoch 39/200 - Train Loss: 0.3869, Val Loss: 0.5985, Accuracy: 0.6277, AUC: 0.7068\n",
      "Epoch 40/200 - Train Loss: 0.4384, Val Loss: 0.5958, Accuracy: 0.6489, AUC: 0.7054\n",
      "Epoch 41/200 - Train Loss: 0.4359, Val Loss: 0.5998, Accuracy: 0.6809, AUC: 0.7068\n",
      "Epoch 42/200 - Train Loss: 0.4707, Val Loss: 0.5891, Accuracy: 0.6170, AUC: 0.6807\n",
      "Epoch 43/200 - Train Loss: 0.4498, Val Loss: 0.6157, Accuracy: 0.6596, AUC: 0.6890\n",
      "Epoch 44/200 - Train Loss: 0.4989, Val Loss: 0.6308, Accuracy: 0.6596, AUC: 0.6956\n",
      "Epoch 45/200 - Train Loss: 0.4647, Val Loss: 0.6112, Accuracy: 0.6702, AUC: 0.6988\n",
      "Epoch 46/200 - Train Loss: 0.4635, Val Loss: 0.5717, Accuracy: 0.6702, AUC: 0.6951\n",
      "Epoch 47/200 - Train Loss: 0.3842, Val Loss: 0.5721, Accuracy: 0.6915, AUC: 0.6979\n",
      "Epoch 48/200 - Train Loss: 0.4344, Val Loss: 0.6042, Accuracy: 0.6489, AUC: 0.6979\n",
      "Epoch 49/200 - Train Loss: 0.4194, Val Loss: 0.5993, Accuracy: 0.6277, AUC: 0.6751\n",
      "Epoch 50/200 - Train Loss: 0.4162, Val Loss: 0.5851, Accuracy: 0.6809, AUC: 0.7077\n",
      "Epoch 51/200 - Train Loss: 0.4383, Val Loss: 0.6030, Accuracy: 0.6383, AUC: 0.6951\n",
      "Epoch 52/200 - Train Loss: 0.4075, Val Loss: 0.6093, Accuracy: 0.6489, AUC: 0.6946\n",
      "Epoch 53/200 - Train Loss: 0.4170, Val Loss: 0.5987, Accuracy: 0.6383, AUC: 0.6862\n",
      "Epoch 54/200 - Train Loss: 0.4276, Val Loss: 0.6130, Accuracy: 0.6702, AUC: 0.6956\n",
      "Epoch 55/200 - Train Loss: 0.4079, Val Loss: 0.5963, Accuracy: 0.6915, AUC: 0.7068\n",
      "Epoch 56/200 - Train Loss: 0.4505, Val Loss: 0.5758, Accuracy: 0.6809, AUC: 0.6984\n",
      "Epoch 57/200 - Train Loss: 0.4083, Val Loss: 0.5955, Accuracy: 0.6809, AUC: 0.6881\n",
      "Epoch 58/200 - Train Loss: 0.4085, Val Loss: 0.5817, Accuracy: 0.6915, AUC: 0.7030\n",
      "Epoch 59/200 - Train Loss: 0.4233, Val Loss: 0.5817, Accuracy: 0.6596, AUC: 0.6914\n",
      "Epoch 60/200 - Train Loss: 0.4384, Val Loss: 0.5883, Accuracy: 0.6596, AUC: 0.6932\n",
      "Epoch 61/200 - Train Loss: 0.4264, Val Loss: 0.6017, Accuracy: 0.6489, AUC: 0.6932\n",
      "Epoch 62/200 - Train Loss: 0.4163, Val Loss: 0.5982, Accuracy: 0.6596, AUC: 0.6979\n",
      "Early stopping at epoch 62\n",
      "\n",
      "Final Model Performance:\n",
      "Accuracy: 0.6596\n",
      "Precision: 0.6386\n",
      "Recall: 0.9636\n",
      "F1 Score: 0.7681\n",
      "AUC: 0.6979\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1200x400 with 3 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Training final model using 5-fold cross-validation...\n",
      "\n",
      "Fold 1/5\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/torch/optim/lr_scheduler.py:62: UserWarning: The verbose parameter is deprecated. Please use get_last_lr() to access the learning rate.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/200 - Train Loss: 0.7155, Val Loss: 0.6072, Accuracy: 0.4149, AUC: 0.6600\n",
      "Epoch 2/200 - Train Loss: 0.6511, Val Loss: 0.5851, Accuracy: 0.4255, AUC: 0.6775\n",
      "Epoch 3/200 - Train Loss: 0.6335, Val Loss: 0.5361, Accuracy: 0.5851, AUC: 0.6920\n",
      "Epoch 4/200 - Train Loss: 0.5329, Val Loss: 0.5410, Accuracy: 0.5426, AUC: 0.6877\n",
      "Epoch 5/200 - Train Loss: 0.5594, Val Loss: 0.5355, Accuracy: 0.6489, AUC: 0.6818\n",
      "Epoch 6/200 - Train Loss: 0.5913, Val Loss: 0.5183, Accuracy: 0.6489, AUC: 0.6949\n",
      "Epoch 7/200 - Train Loss: 0.5620, Val Loss: 0.5089, Accuracy: 0.6702, AUC: 0.7090\n",
      "Epoch 8/200 - Train Loss: 0.5402, Val Loss: 0.5048, Accuracy: 0.6915, AUC: 0.7065\n",
      "Epoch 9/200 - Train Loss: 0.5059, Val Loss: 0.5086, Accuracy: 0.6596, AUC: 0.6915\n",
      "Epoch 10/200 - Train Loss: 0.5268, Val Loss: 0.5133, Accuracy: 0.6489, AUC: 0.6818\n",
      "Epoch 11/200 - Train Loss: 0.5164, Val Loss: 0.5067, Accuracy: 0.6702, AUC: 0.6891\n",
      "Epoch 12/200 - Train Loss: 0.4895, Val Loss: 0.5051, Accuracy: 0.6596, AUC: 0.6949\n",
      "Epoch 13/200 - Train Loss: 0.5235, Val Loss: 0.5136, Accuracy: 0.6702, AUC: 0.7094\n",
      "Epoch 14/200 - Train Loss: 0.5201, Val Loss: 0.5108, Accuracy: 0.6809, AUC: 0.6901\n",
      "Epoch 15/200 - Train Loss: 0.4638, Val Loss: 0.5029, Accuracy: 0.6702, AUC: 0.7220\n",
      "Epoch 16/200 - Train Loss: 0.4500, Val Loss: 0.4978, Accuracy: 0.6596, AUC: 0.7230\n",
      "Epoch 17/200 - Train Loss: 0.5139, Val Loss: 0.5040, Accuracy: 0.6596, AUC: 0.7061\n",
      "Epoch 18/200 - Train Loss: 0.4844, Val Loss: 0.5055, Accuracy: 0.6809, AUC: 0.6983\n",
      "Epoch 19/200 - Train Loss: 0.4990, Val Loss: 0.5031, Accuracy: 0.6596, AUC: 0.7157\n",
      "Epoch 20/200 - Train Loss: 0.4435, Val Loss: 0.5038, Accuracy: 0.6809, AUC: 0.7191\n",
      "Epoch 21/200 - Train Loss: 0.4718, Val Loss: 0.5061, Accuracy: 0.6915, AUC: 0.7065\n",
      "Epoch 22/200 - Train Loss: 0.4478, Val Loss: 0.5094, Accuracy: 0.6915, AUC: 0.7090\n",
      "Epoch 23/200 - Train Loss: 0.5112, Val Loss: 0.5044, Accuracy: 0.6702, AUC: 0.7162\n",
      "Early stopping at epoch 23\n",
      "\n",
      "Final Model Performance:\n",
      "Accuracy: 0.6702\n",
      "Precision: 0.7121\n",
      "Recall: 0.7966\n",
      "F1 Score: 0.7520\n",
      "AUC: 0.7162\n",
      "\n",
      "Fold 2/5\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/torch/optim/lr_scheduler.py:62: UserWarning: The verbose parameter is deprecated. Please use get_last_lr() to access the learning rate.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/200 - Train Loss: 0.6874, Val Loss: 0.6441, Accuracy: 0.4149, AUC: 0.4735\n",
      "Epoch 2/200 - Train Loss: 0.6587, Val Loss: 0.6529, Accuracy: 0.4681, AUC: 0.4749\n",
      "Epoch 3/200 - Train Loss: 0.5972, Val Loss: 0.7321, Accuracy: 0.5638, AUC: 0.5320\n",
      "Epoch 4/200 - Train Loss: 0.5669, Val Loss: 0.7498, Accuracy: 0.5106, AUC: 0.5301\n",
      "Epoch 5/200 - Train Loss: 0.5961, Val Loss: 0.7456, Accuracy: 0.5745, AUC: 0.5831\n",
      "Epoch 6/200 - Train Loss: 0.5170, Val Loss: 0.7025, Accuracy: 0.5532, AUC: 0.5831\n",
      "Epoch 7/200 - Train Loss: 0.5608, Val Loss: 0.7047, Accuracy: 0.5745, AUC: 0.6245\n",
      "Epoch 8/200 - Train Loss: 0.5447, Val Loss: 0.7128, Accuracy: 0.5851, AUC: 0.6286\n",
      "Epoch 9/200 - Train Loss: 0.5432, Val Loss: 0.7491, Accuracy: 0.5851, AUC: 0.6323\n",
      "Epoch 10/200 - Train Loss: 0.5673, Val Loss: 0.7285, Accuracy: 0.5851, AUC: 0.6553\n",
      "Epoch 11/200 - Train Loss: 0.5617, Val Loss: 0.7154, Accuracy: 0.6170, AUC: 0.6328\n",
      "Epoch 12/200 - Train Loss: 0.5099, Val Loss: 0.7417, Accuracy: 0.6064, AUC: 0.6415\n",
      "Epoch 13/200 - Train Loss: 0.4693, Val Loss: 0.7251, Accuracy: 0.6170, AUC: 0.6461\n",
      "Epoch 14/200 - Train Loss: 0.4737, Val Loss: 0.7748, Accuracy: 0.6064, AUC: 0.6567\n",
      "Epoch 15/200 - Train Loss: 0.4408, Val Loss: 0.7340, Accuracy: 0.6064, AUC: 0.6664\n",
      "Epoch 16/200 - Train Loss: 0.4765, Val Loss: 0.7110, Accuracy: 0.5957, AUC: 0.6572\n",
      "Epoch 17/200 - Train Loss: 0.4953, Val Loss: 0.7489, Accuracy: 0.6170, AUC: 0.6746\n",
      "Epoch 18/200 - Train Loss: 0.4605, Val Loss: 0.7553, Accuracy: 0.6064, AUC: 0.6792\n",
      "Epoch 19/200 - Train Loss: 0.4555, Val Loss: 0.7505, Accuracy: 0.6170, AUC: 0.6710\n",
      "Epoch 20/200 - Train Loss: 0.4502, Val Loss: 0.7467, Accuracy: 0.6170, AUC: 0.6622\n",
      "Epoch 21/200 - Train Loss: 0.4459, Val Loss: 0.7420, Accuracy: 0.6064, AUC: 0.6622\n",
      "Epoch 22/200 - Train Loss: 0.4602, Val Loss: 0.7303, Accuracy: 0.6064, AUC: 0.6825\n",
      "Epoch 23/200 - Train Loss: 0.4396, Val Loss: 0.7298, Accuracy: 0.6489, AUC: 0.6898\n",
      "Epoch 24/200 - Train Loss: 0.4692, Val Loss: 0.7489, Accuracy: 0.6064, AUC: 0.6797\n",
      "Epoch 25/200 - Train Loss: 0.4507, Val Loss: 0.7635, Accuracy: 0.6170, AUC: 0.6815\n",
      "Epoch 26/200 - Train Loss: 0.4518, Val Loss: 0.7370, Accuracy: 0.6277, AUC: 0.6788\n",
      "Epoch 27/200 - Train Loss: 0.4126, Val Loss: 0.7268, Accuracy: 0.6064, AUC: 0.6820\n",
      "Epoch 28/200 - Train Loss: 0.4543, Val Loss: 0.7162, Accuracy: 0.6170, AUC: 0.6820\n",
      "Epoch 29/200 - Train Loss: 0.4545, Val Loss: 0.7337, Accuracy: 0.6064, AUC: 0.6650\n",
      "Epoch 30/200 - Train Loss: 0.4496, Val Loss: 0.7107, Accuracy: 0.6064, AUC: 0.6397\n",
      "Epoch 31/200 - Train Loss: 0.3876, Val Loss: 0.7201, Accuracy: 0.6064, AUC: 0.6424\n",
      "Epoch 32/200 - Train Loss: 0.4602, Val Loss: 0.7590, Accuracy: 0.6064, AUC: 0.6295\n",
      "Epoch 33/200 - Train Loss: 0.4429, Val Loss: 0.7399, Accuracy: 0.6064, AUC: 0.6696\n",
      "Epoch 34/200 - Train Loss: 0.4194, Val Loss: 0.7263, Accuracy: 0.6064, AUC: 0.6249\n",
      "Epoch 35/200 - Train Loss: 0.4392, Val Loss: 0.7529, Accuracy: 0.5957, AUC: 0.6590\n",
      "Epoch 36/200 - Train Loss: 0.4020, Val Loss: 0.7562, Accuracy: 0.6064, AUC: 0.6553\n",
      "Epoch 37/200 - Train Loss: 0.3987, Val Loss: 0.7380, Accuracy: 0.5957, AUC: 0.6613\n",
      "Epoch 38/200 - Train Loss: 0.4406, Val Loss: 0.7164, Accuracy: 0.6064, AUC: 0.6682\n",
      "Early stopping at epoch 38\n",
      "\n",
      "Final Model Performance:\n",
      "Accuracy: 0.6064\n",
      "Precision: 0.6026\n",
      "Recall: 0.8868\n",
      "F1 Score: 0.7176\n",
      "AUC: 0.6682\n",
      "\n",
      "Fold 3/5\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/torch/optim/lr_scheduler.py:62: UserWarning: The verbose parameter is deprecated. Please use get_last_lr() to access the learning rate.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/200 - Train Loss: 0.6901, Val Loss: 0.6143, Accuracy: 0.5851, AUC: 0.5586\n",
      "Epoch 2/200 - Train Loss: 0.6288, Val Loss: 0.6423, Accuracy: 0.5213, AUC: 0.5627\n",
      "Epoch 3/200 - Train Loss: 0.6217, Val Loss: 0.6070, Accuracy: 0.5638, AUC: 0.6159\n",
      "Epoch 4/200 - Train Loss: 0.5496, Val Loss: 0.5772, Accuracy: 0.5851, AUC: 0.6682\n",
      "Epoch 5/200 - Train Loss: 0.5436, Val Loss: 0.5984, Accuracy: 0.5851, AUC: 0.6564\n",
      "Epoch 6/200 - Train Loss: 0.5579, Val Loss: 0.6015, Accuracy: 0.5957, AUC: 0.6568\n",
      "Epoch 7/200 - Train Loss: 0.5448, Val Loss: 0.6057, Accuracy: 0.6170, AUC: 0.6827\n",
      "Epoch 8/200 - Train Loss: 0.5160, Val Loss: 0.5924, Accuracy: 0.5957, AUC: 0.6691\n",
      "Epoch 9/200 - Train Loss: 0.5219, Val Loss: 0.6151, Accuracy: 0.6383, AUC: 0.6973\n",
      "Epoch 10/200 - Train Loss: 0.5178, Val Loss: 0.5853, Accuracy: 0.6489, AUC: 0.7155\n",
      "Epoch 11/200 - Train Loss: 0.4843, Val Loss: 0.5907, Accuracy: 0.6064, AUC: 0.7195\n",
      "Epoch 12/200 - Train Loss: 0.4769, Val Loss: 0.5921, Accuracy: 0.6277, AUC: 0.7318\n",
      "Epoch 13/200 - Train Loss: 0.4607, Val Loss: 0.5746, Accuracy: 0.6383, AUC: 0.7432\n",
      "Epoch 14/200 - Train Loss: 0.4968, Val Loss: 0.6019, Accuracy: 0.6277, AUC: 0.7041\n",
      "Epoch 15/200 - Train Loss: 0.4605, Val Loss: 0.5877, Accuracy: 0.6596, AUC: 0.7045\n",
      "Epoch 16/200 - Train Loss: 0.4619, Val Loss: 0.6152, Accuracy: 0.6170, AUC: 0.6977\n",
      "Epoch 17/200 - Train Loss: 0.4363, Val Loss: 0.5657, Accuracy: 0.6702, AUC: 0.7323\n",
      "Epoch 18/200 - Train Loss: 0.4727, Val Loss: 0.5598, Accuracy: 0.6489, AUC: 0.7168\n",
      "Epoch 19/200 - Train Loss: 0.4439, Val Loss: 0.5606, Accuracy: 0.6702, AUC: 0.7409\n",
      "Epoch 20/200 - Train Loss: 0.5095, Val Loss: 0.5421, Accuracy: 0.6170, AUC: 0.7395\n",
      "Epoch 21/200 - Train Loss: 0.4213, Val Loss: 0.5420, Accuracy: 0.6170, AUC: 0.7405\n",
      "Epoch 22/200 - Train Loss: 0.4386, Val Loss: 0.5422, Accuracy: 0.6277, AUC: 0.7459\n",
      "Epoch 23/200 - Train Loss: 0.4369, Val Loss: 0.5395, Accuracy: 0.6170, AUC: 0.7514\n",
      "Epoch 24/200 - Train Loss: 0.4581, Val Loss: 0.5305, Accuracy: 0.6489, AUC: 0.7482\n",
      "Epoch 25/200 - Train Loss: 0.4392, Val Loss: 0.5166, Accuracy: 0.6702, AUC: 0.7559\n",
      "Epoch 26/200 - Train Loss: 0.4267, Val Loss: 0.5193, Accuracy: 0.6596, AUC: 0.7527\n",
      "Epoch 27/200 - Train Loss: 0.4513, Val Loss: 0.5339, Accuracy: 0.6596, AUC: 0.7541\n",
      "Epoch 28/200 - Train Loss: 0.3947, Val Loss: 0.5399, Accuracy: 0.6596, AUC: 0.7427\n",
      "Epoch 29/200 - Train Loss: 0.4219, Val Loss: 0.5670, Accuracy: 0.6064, AUC: 0.7286\n",
      "Epoch 30/200 - Train Loss: 0.3965, Val Loss: 0.5558, Accuracy: 0.6064, AUC: 0.7382\n",
      "Epoch 31/200 - Train Loss: 0.4047, Val Loss: 0.5520, Accuracy: 0.6170, AUC: 0.7359\n",
      "Epoch 32/200 - Train Loss: 0.3967, Val Loss: 0.5803, Accuracy: 0.6170, AUC: 0.7327\n",
      "Early stopping at epoch 32\n",
      "\n",
      "Final Model Performance:\n",
      "Accuracy: 0.6170\n",
      "Precision: 0.5897\n",
      "Recall: 0.9200\n",
      "F1 Score: 0.7188\n",
      "AUC: 0.7327\n",
      "\n",
      "Fold 4/5\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/torch/optim/lr_scheduler.py:62: UserWarning: The verbose parameter is deprecated. Please use get_last_lr() to access the learning rate.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/200 - Train Loss: 0.6734, Val Loss: 0.5587, Accuracy: 0.4468, AUC: 0.6083\n",
      "Epoch 2/200 - Train Loss: 0.6524, Val Loss: 0.5254, Accuracy: 0.7128, AUC: 0.6837\n",
      "Epoch 3/200 - Train Loss: 0.6415, Val Loss: 0.5610, Accuracy: 0.6596, AUC: 0.6515\n",
      "Epoch 4/200 - Train Loss: 0.6293, Val Loss: 0.5384, Accuracy: 0.6170, AUC: 0.6695\n",
      "Epoch 5/200 - Train Loss: 0.6089, Val Loss: 0.5416, Accuracy: 0.7021, AUC: 0.6804\n",
      "Epoch 6/200 - Train Loss: 0.5836, Val Loss: 0.5611, Accuracy: 0.6489, AUC: 0.6880\n",
      "Epoch 7/200 - Train Loss: 0.5905, Val Loss: 0.5580, Accuracy: 0.6702, AUC: 0.7193\n",
      "Epoch 8/200 - Train Loss: 0.5820, Val Loss: 0.5456, Accuracy: 0.6915, AUC: 0.7212\n",
      "Epoch 9/200 - Train Loss: 0.5598, Val Loss: 0.5592, Accuracy: 0.6809, AUC: 0.7117\n",
      "Epoch 10/200 - Train Loss: 0.5544, Val Loss: 0.5666, Accuracy: 0.6596, AUC: 0.7008\n",
      "Epoch 11/200 - Train Loss: 0.5243, Val Loss: 0.5532, Accuracy: 0.6915, AUC: 0.7150\n",
      "Epoch 12/200 - Train Loss: 0.5316, Val Loss: 0.5680, Accuracy: 0.6064, AUC: 0.6961\n",
      "Epoch 13/200 - Train Loss: 0.5472, Val Loss: 0.5797, Accuracy: 0.6277, AUC: 0.6927\n",
      "Epoch 14/200 - Train Loss: 0.5256, Val Loss: 0.5637, Accuracy: 0.6596, AUC: 0.7008\n",
      "Epoch 15/200 - Train Loss: 0.5028, Val Loss: 0.5720, Accuracy: 0.6809, AUC: 0.7013\n",
      "Epoch 16/200 - Train Loss: 0.5107, Val Loss: 0.5519, Accuracy: 0.6915, AUC: 0.7060\n",
      "Epoch 17/200 - Train Loss: 0.5099, Val Loss: 0.5474, Accuracy: 0.6702, AUC: 0.7084\n",
      "Early stopping at epoch 17\n",
      "\n",
      "Final Model Performance:\n",
      "Accuracy: 0.6702\n",
      "Precision: 0.7241\n",
      "Recall: 0.7368\n",
      "F1 Score: 0.7304\n",
      "AUC: 0.7084\n",
      "\n",
      "Fold 5/5\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/torch/optim/lr_scheduler.py:62: UserWarning: The verbose parameter is deprecated. Please use get_last_lr() to access the learning rate.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/200 - Train Loss: 0.7241, Val Loss: 0.5783, Accuracy: 0.3763, AUC: 0.4722\n",
      "Epoch 2/200 - Train Loss: 0.6140, Val Loss: 0.5592, Accuracy: 0.6129, AUC: 0.5960\n",
      "Epoch 3/200 - Train Loss: 0.6202, Val Loss: 0.5545, Accuracy: 0.6774, AUC: 0.6306\n",
      "Epoch 4/200 - Train Loss: 0.5667, Val Loss: 0.5526, Accuracy: 0.5914, AUC: 0.6545\n",
      "Epoch 5/200 - Train Loss: 0.5896, Val Loss: 0.5532, Accuracy: 0.7419, AUC: 0.6818\n",
      "Epoch 6/200 - Train Loss: 0.5813, Val Loss: 0.5500, Accuracy: 0.6667, AUC: 0.7061\n",
      "Epoch 7/200 - Train Loss: 0.5430, Val Loss: 0.5482, Accuracy: 0.6559, AUC: 0.7407\n",
      "Epoch 8/200 - Train Loss: 0.5757, Val Loss: 0.5441, Accuracy: 0.6989, AUC: 0.7334\n",
      "Epoch 9/200 - Train Loss: 0.5424, Val Loss: 0.5493, Accuracy: 0.6667, AUC: 0.7325\n",
      "Epoch 10/200 - Train Loss: 0.5391, Val Loss: 0.5534, Accuracy: 0.6774, AUC: 0.6525\n",
      "Epoch 11/200 - Train Loss: 0.5269, Val Loss: 0.5417, Accuracy: 0.6667, AUC: 0.7510\n",
      "Epoch 12/200 - Train Loss: 0.4839, Val Loss: 0.5515, Accuracy: 0.6559, AUC: 0.7325\n",
      "Epoch 13/200 - Train Loss: 0.5406, Val Loss: 0.5467, Accuracy: 0.6559, AUC: 0.7398\n",
      "Epoch 14/200 - Train Loss: 0.5323, Val Loss: 0.5457, Accuracy: 0.6559, AUC: 0.7388\n",
      "Epoch 15/200 - Train Loss: 0.4769, Val Loss: 0.5522, Accuracy: 0.6559, AUC: 0.7125\n",
      "Epoch 16/200 - Train Loss: 0.5199, Val Loss: 0.5574, Accuracy: 0.6452, AUC: 0.7120\n",
      "Epoch 17/200 - Train Loss: 0.5096, Val Loss: 0.5544, Accuracy: 0.6452, AUC: 0.7057\n",
      "Epoch 18/200 - Train Loss: 0.5128, Val Loss: 0.5516, Accuracy: 0.6559, AUC: 0.7573\n",
      "Epoch 19/200 - Train Loss: 0.4745, Val Loss: 0.5515, Accuracy: 0.6452, AUC: 0.7417\n",
      "Epoch 20/200 - Train Loss: 0.4271, Val Loss: 0.5334, Accuracy: 0.6882, AUC: 0.7719\n",
      "Early stopping at epoch 20\n",
      "\n",
      "Final Model Performance:\n",
      "Accuracy: 0.6882\n",
      "Precision: 0.6667\n",
      "Recall: 0.9825\n",
      "F1 Score: 0.7943\n",
      "AUC: 0.7719\n",
      "\n",
      "Cross-validation results:\n",
      "Average accuracy: 0.6504\n",
      "Average precision: 0.6590\n",
      "Average recall: 0.8645\n",
      "Average f1: 0.7426\n",
      "Average auc: 0.7195\n",
      "\n",
      "Training final model on full dataset...\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/torch/optim/lr_scheduler.py:62: UserWarning: The verbose parameter is deprecated. Please use get_last_lr() to access the learning rate.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/200 - Train Loss: 0.6667, Val Loss: 0.5535, Accuracy: 0.5745, AUC: 0.7105\n",
      "Epoch 2/200 - Train Loss: 0.6482, Val Loss: 0.5453, Accuracy: 0.7447, AUC: 0.7556\n",
      "Epoch 3/200 - Train Loss: 0.6256, Val Loss: 0.5379, Accuracy: 0.7021, AUC: 0.7613\n",
      "Epoch 4/200 - Train Loss: 0.5826, Val Loss: 0.5330, Accuracy: 0.4894, AUC: 0.7707\n",
      "Epoch 5/200 - Train Loss: 0.5679, Val Loss: 0.5417, Accuracy: 0.6809, AUC: 0.7256\n",
      "Epoch 6/200 - Train Loss: 0.5969, Val Loss: 0.5449, Accuracy: 0.6809, AUC: 0.7368\n",
      "Epoch 7/200 - Train Loss: 0.5446, Val Loss: 0.5344, Accuracy: 0.6809, AUC: 0.8308\n",
      "Epoch 8/200 - Train Loss: 0.5312, Val Loss: 0.5207, Accuracy: 0.7660, AUC: 0.7763\n",
      "Epoch 9/200 - Train Loss: 0.5488, Val Loss: 0.5050, Accuracy: 0.7021, AUC: 0.7932\n",
      "Epoch 10/200 - Train Loss: 0.5282, Val Loss: 0.5065, Accuracy: 0.7872, AUC: 0.8102\n",
      "Epoch 11/200 - Train Loss: 0.5066, Val Loss: 0.5174, Accuracy: 0.7447, AUC: 0.8008\n",
      "Epoch 12/200 - Train Loss: 0.5262, Val Loss: 0.5203, Accuracy: 0.7021, AUC: 0.8289\n",
      "Epoch 13/200 - Train Loss: 0.5179, Val Loss: 0.5220, Accuracy: 0.6809, AUC: 0.8477\n",
      "Epoch 14/200 - Train Loss: 0.5024, Val Loss: 0.5066, Accuracy: 0.7660, AUC: 0.8365\n",
      "Epoch 15/200 - Train Loss: 0.5038, Val Loss: 0.4942, Accuracy: 0.7872, AUC: 0.8346\n",
      "Epoch 16/200 - Train Loss: 0.4730, Val Loss: 0.4917, Accuracy: 0.7660, AUC: 0.8308\n",
      "Epoch 17/200 - Train Loss: 0.4533, Val Loss: 0.4839, Accuracy: 0.8085, AUC: 0.8158\n",
      "Epoch 18/200 - Train Loss: 0.4785, Val Loss: 0.4871, Accuracy: 0.8085, AUC: 0.8139\n",
      "Epoch 19/200 - Train Loss: 0.4282, Val Loss: 0.4890, Accuracy: 0.8085, AUC: 0.8045\n",
      "Epoch 20/200 - Train Loss: 0.4502, Val Loss: 0.4851, Accuracy: 0.7660, AUC: 0.8102\n",
      "Epoch 21/200 - Train Loss: 0.4802, Val Loss: 0.4809, Accuracy: 0.7660, AUC: 0.8252\n",
      "Epoch 22/200 - Train Loss: 0.4647, Val Loss: 0.4809, Accuracy: 0.7660, AUC: 0.8177\n",
      "Epoch 23/200 - Train Loss: 0.4592, Val Loss: 0.4760, Accuracy: 0.7660, AUC: 0.8158\n",
      "Epoch 24/200 - Train Loss: 0.4751, Val Loss: 0.4816, Accuracy: 0.7660, AUC: 0.8045\n",
      "Epoch 25/200 - Train Loss: 0.4668, Val Loss: 0.4810, Accuracy: 0.7872, AUC: 0.8214\n",
      "Epoch 26/200 - Train Loss: 0.4260, Val Loss: 0.4754, Accuracy: 0.7872, AUC: 0.8252\n",
      "Epoch 27/200 - Train Loss: 0.4711, Val Loss: 0.4740, Accuracy: 0.7660, AUC: 0.8064\n",
      "Epoch 28/200 - Train Loss: 0.4333, Val Loss: 0.4806, Accuracy: 0.7660, AUC: 0.8308\n",
      "Epoch 29/200 - Train Loss: 0.4431, Val Loss: 0.4828, Accuracy: 0.8085, AUC: 0.8214\n",
      "Epoch 30/200 - Train Loss: 0.4722, Val Loss: 0.4736, Accuracy: 0.7872, AUC: 0.8271\n",
      "Epoch 31/200 - Train Loss: 0.4204, Val Loss: 0.4719, Accuracy: 0.8085, AUC: 0.8195\n",
      "Epoch 32/200 - Train Loss: 0.4544, Val Loss: 0.4839, Accuracy: 0.8085, AUC: 0.8195\n",
      "Early stopping at epoch 32\n",
      "\n",
      "Final Model Performance:\n",
      "Accuracy: 0.8085\n",
      "Precision: 0.7714\n",
      "Recall: 0.9643\n",
      "F1 Score: 0.8571\n",
      "AUC: 0.8195\n",
      "\n",
      "Final model saved as 'parkinson_classifier_final.pth'\n",
      "\n",
      "Done!\n"
     ]
    }
   ],
   "source": [
    "import os\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import torch\n",
    "import torch.nn as nn\n",
    "import torch.nn.functional as F\n",
    "from sklearn.model_selection import train_test_split, KFold\n",
    "from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, roc_auc_score\n",
    "from torch.utils.data import DataLoader, TensorDataset\n",
    "from tqdm import tqdm\n",
    "import matplotlib.pyplot as plt\n",
    "from torch.optim.lr_scheduler import ReduceLROnPlateau\n",
    "import pywt  # PyWavelets for wavelet transform\n",
    "import random\n",
    "\n",
    "def set_seed(seed=42):\n",
    "    np.random.seed(seed)\n",
    "    torch.manual_seed(seed)\n",
    "    random.seed(seed)\n",
    "    torch.cuda.manual_seed(seed)\n",
    "    torch.backends.cudnn.deterministic = True\n",
    "    torch.backends.cudnn.benchmark = False\n",
    "\n",
    "\n",
    "# Device\n",
    "DEVICE = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\n",
    "\n",
    "# Paths\n",
    "DATA_DIR = \"/kaggle/input/movement2/movement\"\n",
    "LABEL_PATH = \"/kaggle/input/patient-labels2/patient_labels.csv\"\n",
    "\n",
    "# Load functions\n",
    "def load_bin_file(filepath):\n",
    "    data = np.fromfile(filepath, dtype=np.float32)\n",
    "    assert data.shape[0] == 128832\n",
    "    return data.reshape(132, 976)\n",
    "\n",
    "def load_all_files(data_dir):\n",
    "    X = []\n",
    "    filepaths = sorted([\n",
    "        os.path.join(data_dir, f) for f in os.listdir(data_dir) if f.endswith(\".bin\")\n",
    "    ])\n",
    "    print(f\"Found {len(filepaths)} files.\")\n",
    "    for path in tqdm(filepaths):\n",
    "        X.append(load_bin_file(path))\n",
    "    return np.stack(X), filepaths\n",
    "\n",
    "def load_labels(label_path):\n",
    "    df = pd.read_csv(label_path)\n",
    "    return df['label'].values.astype(np.float32)\n",
    "\n",
    "# Feature extraction functions\n",
    "def extract_statistical_features(X):\n",
    "    \"\"\"Extract statistical features from time series data\"\"\"\n",
    "    # X shape: (samples, channels, time_steps)\n",
    "    features = []\n",
    "    \n",
    "    for i in range(X.shape[0]):  # For each sample\n",
    "        sample_features = []\n",
    "        \n",
    "        for j in range(X.shape[1]):  # For each channel\n",
    "            channel_data = X[i, j, :]\n",
    "            \n",
    "            # Basic statistics\n",
    "            mean = np.mean(channel_data)\n",
    "            std = np.std(channel_data)\n",
    "            min_val = np.min(channel_data)\n",
    "            max_val = np.max(channel_data)\n",
    "            median = np.median(channel_data)\n",
    "            \n",
    "            # Signal characteristics\n",
    "            rms = np.sqrt(np.mean(channel_data**2))\n",
    "            peak_to_peak = max_val - min_val\n",
    "            \n",
    "            # Shape characteristics\n",
    "            skewness = np.mean(((channel_data - mean) / (std + 1e-10))**3) if std > 0 else 0\n",
    "            kurtosis = np.mean(((channel_data - mean) / (std + 1e-10))**4) if std > 0 else 0\n",
    "            \n",
    "            # Frequency domain (simple)\n",
    "            fft_vals = np.abs(np.fft.rfft(channel_data))\n",
    "            fft_freq = np.fft.rfftfreq(len(channel_data))\n",
    "            dominant_freq_idx = np.argmax(fft_vals)\n",
    "            dominant_freq = fft_freq[dominant_freq_idx]\n",
    "            dominant_power = fft_vals[dominant_freq_idx]\n",
    "            \n",
    "            # Energy in different frequency bands\n",
    "            low_freq_power = np.sum(fft_vals[fft_freq < 0.1]**2)\n",
    "            mid_freq_power = np.sum(fft_vals[(fft_freq >= 0.1) & (fft_freq < 0.3)]**2)\n",
    "            high_freq_power = np.sum(fft_vals[fft_freq >= 0.3]**2)\n",
    "            \n",
    "            # Combine features\n",
    "            channel_features = [mean, std, min_val, max_val, median, \n",
    "                               rms, peak_to_peak, skewness, kurtosis,\n",
    "                               dominant_freq, dominant_power,\n",
    "                               low_freq_power, mid_freq_power, high_freq_power]\n",
    "            \n",
    "            sample_features.extend(channel_features)\n",
    "        \n",
    "        features.append(sample_features)\n",
    "    \n",
    "    return np.array(features)\n",
    "\n",
    "def extract_wavelet_features(X, wavelet='db4', level=5):\n",
    "    \"\"\"Extract wavelet transform features from time series data\"\"\"\n",
    "    features = []\n",
    "    \n",
    "    for i in range(X.shape[0]):  # For each sample\n",
    "        sample_features = []\n",
    "        \n",
    "        for j in range(X.shape[1]):  # For each channel\n",
    "            channel_data = X[i, j, :]\n",
    "            \n",
    "            # Perform wavelet decomposition\n",
    "            coeffs = pywt.wavedec(channel_data, wavelet, level=level)\n",
    "            \n",
    "            # Extract features from coefficients\n",
    "            for k, coeff in enumerate(coeffs):\n",
    "                # For each decomposition level, extract statistics\n",
    "                mean = np.mean(coeff)\n",
    "                std = np.std(coeff)\n",
    "                energy = np.sum(coeff**2)\n",
    "                \n",
    "                sample_features.extend([mean, std, energy])\n",
    "        \n",
    "        features.append(sample_features)\n",
    "    \n",
    "    return np.array(features)\n",
    "\n",
    "def extract_cross_channel_features(X):\n",
    "    \"\"\"Extract features that capture relationships between channels\"\"\"\n",
    "    features = []\n",
    "    \n",
    "    for i in range(X.shape[0]):  # For each sample\n",
    "        sample = X[i]  # (channels, time_steps)\n",
    "        \n",
    "        # Correlation matrix between channels\n",
    "        corr_matrix = np.corrcoef(sample)\n",
    "        \n",
    "        # Extract upper triangular part of correlation matrix (without diagonal)\n",
    "        upper_tri = corr_matrix[np.triu_indices(corr_matrix.shape[0], k=1)]\n",
    "        \n",
    "        # Compute some statistics on correlations\n",
    "        mean_corr = np.mean(upper_tri)\n",
    "        std_corr = np.std(upper_tri)\n",
    "        max_corr = np.max(upper_tri)\n",
    "        min_corr = np.min(upper_tri)\n",
    "        \n",
    "        # Frequency domain coherence (simplified)\n",
    "        sample_features = [mean_corr, std_corr, max_corr, min_corr]\n",
    "        \n",
    "        # Add some key channel pairs (assuming domain knowledge about which channels matter)\n",
    "        # This would be better if we knew which channels correspond to which sensors\n",
    "        for c1 in range(0, sample.shape[0], 10):\n",
    "            for c2 in range(c1+5, min(c1+10, sample.shape[0])):\n",
    "                if c2 < sample.shape[0]:\n",
    "                    # Correlation\n",
    "                    corr = np.corrcoef(sample[c1], sample[c2])[0, 1]\n",
    "                    \n",
    "                    # Phase sync (simplified)\n",
    "                    fft1 = np.fft.rfft(sample[c1])\n",
    "                    fft2 = np.fft.rfft(sample[c2])\n",
    "                    phase1 = np.angle(fft1)\n",
    "                    phase2 = np.angle(fft2)\n",
    "                    phase_diff = np.mean(np.abs(phase1 - phase2))\n",
    "                    \n",
    "                    sample_features.extend([corr, phase_diff])\n",
    "        \n",
    "        features.append(sample_features)\n",
    "    \n",
    "    return np.array(features)\n",
    "\n",
    "def preprocess_data(X):\n",
    "    \"\"\"Combine multiple feature extraction methods\"\"\"\n",
    "    print(\"Extracting statistical features...\")\n",
    "    statistical_features = extract_statistical_features(X)\n",
    "    \n",
    "    print(\"Extracting wavelet features...\")\n",
    "    wavelet_features = extract_wavelet_features(X)\n",
    "    \n",
    "    print(\"Extracting cross-channel features...\")\n",
    "    cross_channel_features = extract_cross_channel_features(X)\n",
    "    \n",
    "    # Combine all features\n",
    "    combined_features = np.hstack([\n",
    "        statistical_features, \n",
    "        wavelet_features, \n",
    "        cross_channel_features\n",
    "    ])\n",
    "    \n",
    "    print(f\"Final feature shape: {combined_features.shape}\")\n",
    "    return combined_features\n",
    "\n",
    "# Feature importance and selection\n",
    "def feature_selection(X, y, threshold=0.1):\n",
    "    \"\"\"Select important features using Random Forest feature importance\"\"\"\n",
    "    from sklearn.ensemble import RandomForestClassifier\n",
    "    from sklearn.feature_selection import SelectFromModel\n",
    "    \n",
    "    # Train a Random Forest to get feature importances\n",
    "    rf = RandomForestClassifier(n_estimators=100, random_state=42)\n",
    "    rf.fit(X, y)\n",
    "    \n",
    "    # Select features based on importance\n",
    "    selector = SelectFromModel(rf, threshold=threshold, prefit=True)\n",
    "    X_selected = selector.transform(X)\n",
    "    \n",
    "    # Get feature indices\n",
    "    selected_indices = selector.get_support(indices=True)\n",
    "    \n",
    "    print(f\"Selected {X_selected.shape[1]} features out of {X.shape[1]}\")\n",
    "    return X_selected, selected_indices, selector\n",
    "\n",
    "# Improved neural network model\n",
    "class ParkinsonClassifier(nn.Module):\n",
    "    def __init__(self, input_size, hidden_sizes=[256, 128, 64], dropout_rate=0.3):\n",
    "        super(ParkinsonClassifier, self).__init__()\n",
    "        \n",
    "        # Input layer\n",
    "        layers = [nn.Linear(input_size, hidden_sizes[0])]\n",
    "        \n",
    "        # Hidden layers\n",
    "        for i in range(len(hidden_sizes)-1):\n",
    "            layers.extend([\n",
    "                nn.BatchNorm1d(hidden_sizes[i]),\n",
    "                nn.ReLU(),\n",
    "                nn.Dropout(dropout_rate),\n",
    "                nn.Linear(hidden_sizes[i], hidden_sizes[i+1])\n",
    "            ])\n",
    "        \n",
    "        # Combine layers into feature extractor\n",
    "        self.features = nn.Sequential(*layers)\n",
    "        \n",
    "        # Output layer\n",
    "        self.classifier = nn.Sequential(\n",
    "            nn.BatchNorm1d(hidden_sizes[-1]),\n",
    "            nn.ReLU(),\n",
    "            nn.Dropout(dropout_rate),\n",
    "            nn.Linear(hidden_sizes[-1], 1)\n",
    "        )\n",
    "        \n",
    "        # Initialize weights\n",
    "        self._initialize_weights()\n",
    "    \n",
    "    def _initialize_weights(self):\n",
    "        for m in self.modules():\n",
    "            if isinstance(m, nn.Linear):\n",
    "                nn.init.kaiming_normal_(m.weight)\n",
    "                if m.bias is not None:\n",
    "                    nn.init.constant_(m.bias, 0)\n",
    "    \n",
    "    def forward(self, x):\n",
    "        x = self.features(x)\n",
    "        return self.classifier(x)\n",
    "\n",
    "# Early stopping\n",
    "class EarlyStopping:\n",
    "    def __init__(self, patience=10, min_delta=0, restore_best_weights=True):\n",
    "        self.patience = patience\n",
    "        self.min_delta = min_delta\n",
    "        self.restore_best_weights = restore_best_weights\n",
    "        self.counter = 0\n",
    "        self.best_score = None\n",
    "        self.early_stop = False\n",
    "        self.best_weights = None\n",
    "    \n",
    "    def __call__(self, score, model):\n",
    "        if self.best_score is None:\n",
    "            self.best_score = score\n",
    "            self.best_weights = model.state_dict().copy()\n",
    "        elif score <= self.best_score + self.min_delta:\n",
    "            self.counter += 1\n",
    "            if self.counter >= self.patience:\n",
    "                self.early_stop = True\n",
    "        else:\n",
    "            self.best_score = score\n",
    "            self.best_weights = model.state_dict().copy()\n",
    "            self.counter = 0\n",
    "        \n",
    "        return self.early_stop\n",
    "\n",
    "# Training function\n",
    "def train_model(X_train, y_train, X_val, y_val, hidden_sizes=[256, 128, 64], \n",
    "               dropout_rate=0.3, lr=0.001, batch_size=32, weight_decay=1e-5, \n",
    "               patience=15, num_epochs=200):\n",
    "    \n",
    "    # Convert to PyTorch tensors\n",
    "    X_train_tensor = torch.tensor(X_train, dtype=torch.float32)\n",
    "    y_train_tensor = torch.tensor(y_train, dtype=torch.float32).unsqueeze(1)\n",
    "    X_val_tensor = torch.tensor(X_val, dtype=torch.float32)\n",
    "    y_val_tensor = torch.tensor(y_val, dtype=torch.float32).unsqueeze(1)\n",
    "    \n",
    "    # Create data loaders\n",
    "    train_loader = DataLoader(TensorDataset(X_train_tensor, y_train_tensor), \n",
    "                             batch_size=batch_size, shuffle=True)\n",
    "    val_loader = DataLoader(TensorDataset(X_val_tensor, y_val_tensor), \n",
    "                           batch_size=batch_size)\n",
    "    \n",
    "    # Class weights for imbalanced data\n",
    "    num_positives = (y_train_tensor == 1).sum().item()\n",
    "    num_negatives = (y_train_tensor == 0).sum().item()\n",
    "    pos_weight = torch.tensor([num_negatives / num_positives]).to(DEVICE)\n",
    "    \n",
    "    # Initialize model\n",
    "    model = ParkinsonClassifier(\n",
    "        input_size=X_train.shape[1],\n",
    "        hidden_sizes=hidden_sizes,\n",
    "        dropout_rate=dropout_rate\n",
    "    ).to(DEVICE)\n",
    "    \n",
    "    # Loss and optimizer\n",
    "    criterion = nn.BCEWithLogitsLoss(pos_weight=pos_weight)\n",
    "    optimizer = torch.optim.Adam(model.parameters(), lr=lr, weight_decay=weight_decay)\n",
    "    scheduler = ReduceLROnPlateau(optimizer, mode='max', factor=0.5, patience=5, verbose=True)\n",
    "    early_stopping = EarlyStopping(patience=patience)\n",
    "    \n",
    "    # Training history\n",
    "    history = {'train_loss': [], 'val_loss': [], 'val_accuracy': [], 'val_auc': []}\n",
    "    \n",
    "    # Training loop\n",
    "    for epoch in range(num_epochs):\n",
    "        # Training phase\n",
    "        model.train()\n",
    "        train_loss = 0\n",
    "        \n",
    "        for X_batch, y_batch in train_loader:\n",
    "            X_batch, y_batch = X_batch.to(DEVICE), y_batch.to(DEVICE)\n",
    "            \n",
    "            # Forward pass\n",
    "            outputs = model(X_batch)\n",
    "            loss = criterion(outputs, y_batch)\n",
    "            \n",
    "            # Backward pass\n",
    "            optimizer.zero_grad()\n",
    "            loss.backward()\n",
    "            \n",
    "            # Gradient clipping\n",
    "            nn.utils.clip_grad_norm_(model.parameters(), max_norm=1.0)\n",
    "            \n",
    "            # Update weights\n",
    "            optimizer.step()\n",
    "            \n",
    "            train_loss += loss.item()\n",
    "        \n",
    "        avg_train_loss = train_loss / len(train_loader)\n",
    "        history['train_loss'].append(avg_train_loss)\n",
    "        \n",
    "        # Validation phase\n",
    "        model.eval()\n",
    "        val_loss = 0\n",
    "        all_preds, all_probs, all_labels = [], [], []\n",
    "        \n",
    "        with torch.no_grad():\n",
    "            for X_batch, y_batch in val_loader:\n",
    "                X_batch, y_batch = X_batch.to(DEVICE), y_batch.to(DEVICE)\n",
    "                \n",
    "                # Forward pass\n",
    "                outputs = model(X_batch)\n",
    "                loss = criterion(outputs, y_batch)\n",
    "                \n",
    "                # Save predictions\n",
    "                probs = torch.sigmoid(outputs).cpu().numpy()\n",
    "                preds = (probs > 0.5).astype(int)\n",
    "                \n",
    "                all_probs.extend(probs)\n",
    "                all_preds.extend(preds)\n",
    "                all_labels.extend(y_batch.cpu().numpy())\n",
    "                \n",
    "                val_loss += loss.item()\n",
    "        \n",
    "        # Calculate metrics\n",
    "        avg_val_loss = val_loss / len(val_loader)\n",
    "        accuracy = accuracy_score(all_labels, all_preds)\n",
    "        try:\n",
    "            auc = roc_auc_score(all_labels, all_probs)\n",
    "        except:\n",
    "            auc = 0.5\n",
    "        \n",
    "        # Update history\n",
    "        history['val_loss'].append(avg_val_loss)\n",
    "        history['val_accuracy'].append(accuracy)\n",
    "        history['val_auc'].append(auc)\n",
    "        \n",
    "        # Print progress\n",
    "        print(f\"Epoch {epoch+1}/{num_epochs} - \"\n",
    "              f\"Train Loss: {avg_train_loss:.4f}, Val Loss: {avg_val_loss:.4f}, \"\n",
    "              f\"Accuracy: {accuracy:.4f}, AUC: {auc:.4f}\")\n",
    "        \n",
    "        # Learning rate scheduling\n",
    "        scheduler.step(accuracy)\n",
    "        \n",
    "        # Early stopping\n",
    "        if early_stopping(accuracy, model):\n",
    "            print(f\"Early stopping at epoch {epoch+1}\")\n",
    "            model.load_state_dict(early_stopping.best_weights)\n",
    "            break\n",
    "    \n",
    "    # Final evaluation\n",
    "    model.eval()\n",
    "    all_preds, all_probs, all_labels = [], [], []\n",
    "    \n",
    "    with torch.no_grad():\n",
    "        for X_batch, y_batch in val_loader:\n",
    "            X_batch = X_batch.to(DEVICE)\n",
    "            outputs = model(X_batch)\n",
    "            probs = torch.sigmoid(outputs).cpu().numpy()\n",
    "            preds = (probs > 0.5).astype(int)\n",
    "            all_probs.extend(probs)\n",
    "            all_preds.extend(preds)\n",
    "            all_labels.extend(y_batch.cpu().numpy())\n",
    "    \n",
    "    # Calculate final metrics\n",
    "    accuracy = accuracy_score(all_labels, all_preds)\n",
    "    precision = precision_score(all_labels, all_preds)\n",
    "    recall = recall_score(all_labels, all_preds)\n",
    "    f1 = f1_score(all_labels, all_preds)\n",
    "    try:\n",
    "        auc = roc_auc_score(all_labels, all_probs)\n",
    "    except:\n",
    "        auc = 0.5\n",
    "    \n",
    "    print(\"\\nFinal Model Performance:\")\n",
    "    print(f\"Accuracy: {accuracy:.4f}\")\n",
    "    print(f\"Precision: {precision:.4f}\")\n",
    "    print(f\"Recall: {recall:.4f}\")\n",
    "    print(f\"F1 Score: {f1:.4f}\")\n",
    "    print(f\"AUC: {auc:.4f}\")\n",
    "    \n",
    "    return model, history, {\n",
    "        'accuracy': accuracy,\n",
    "        'precision': precision,\n",
    "        'recall': recall,\n",
    "        'f1': f1,\n",
    "        'auc': auc\n",
    "    }\n",
    "\n",
    "# Function to train a final model using cross-validation for hyperparameter tuning\n",
    "def train_final_model(X, y, params, k_folds=5):\n",
    "    \"\"\"Train final model using k-fold cross-validation to ensure robustness\"\"\"\n",
    "    print(\"\\nTraining final model using {}-fold cross-validation...\".format(k_folds))\n",
    "    \n",
    "    # Setup k-fold cross validation\n",
    "    kfold = KFold(n_splits=k_folds, shuffle=True, random_state=42)\n",
    "    \n",
    "    # Store metrics for each fold\n",
    "    fold_metrics = []\n",
    "    \n",
    "    # Cross-validation process\n",
    "    for fold, (train_idx, val_idx) in enumerate(kfold.split(X)):\n",
    "        print(f\"\\nFold {fold+1}/{k_folds}\")\n",
    "        \n",
    "        # Split data\n",
    "        X_train_fold, X_val_fold = X[train_idx], X[val_idx]\n",
    "        y_train_fold, y_val_fold = y[train_idx], y[val_idx]\n",
    "        \n",
    "        # Train model for this fold\n",
    "        model, _, metrics = train_model(\n",
    "            X_train_fold, y_train_fold, X_val_fold, y_val_fold,\n",
    "            hidden_sizes=params['hidden_sizes'],\n",
    "            dropout_rate=params['dropout_rate'],\n",
    "            lr=params['lr'],\n",
    "            batch_size=params['batch_size'],\n",
    "            weight_decay=params['weight_decay'],\n",
    "            patience=params['patience']\n",
    "        )\n",
    "        \n",
    "        fold_metrics.append(metrics)\n",
    "    \n",
    "    # Print averaged results from cross-validation\n",
    "    print(\"\\nCross-validation results:\")\n",
    "    avg_metrics = {metric: np.mean([fold[metric] for fold in fold_metrics]) for metric in fold_metrics[0]}\n",
    "    for metric, value in avg_metrics.items():\n",
    "        print(f\"Average {metric}: {value:.4f}\")\n",
    "    \n",
    "    # Now train the final model on the full dataset\n",
    "    print(\"\\nTraining final model on full dataset...\")\n",
    "    \n",
    "    # Create a validation set for early stopping (10% of data)\n",
    "    X_train_final, X_val_final, y_train_final, y_val_final = train_test_split(\n",
    "        X, y, test_size=0.1, random_state=42, stratify=y\n",
    "    )\n",
    "    \n",
    "    final_model, _, _ = train_model(\n",
    "        X_train_final, y_train_final, X_val_final, y_val_final,\n",
    "        hidden_sizes=params['hidden_sizes'],\n",
    "        dropout_rate=params['dropout_rate'],\n",
    "        lr=params['lr'],\n",
    "        batch_size=params['batch_size'],\n",
    "        weight_decay=params['weight_decay'],\n",
    "        patience=params['patience']\n",
    "    )\n",
    "    \n",
    "    return final_model, avg_metrics\n",
    "\n",
    "# Plot training history\n",
    "def plot_history(history):\n",
    "    plt.figure(figsize=(12, 4))\n",
    "    \n",
    "    # Plot training & validation loss\n",
    "    plt.subplot(1, 3, 1)\n",
    "    plt.plot(history['train_loss'], label='Training Loss')\n",
    "    plt.plot(history['val_loss'], label='Validation Loss')\n",
    "    plt.title('Loss')\n",
    "    plt.xlabel('Epochs')\n",
    "    plt.ylabel('Loss')\n",
    "    plt.legend()\n",
    "    \n",
    "    # Plot validation accuracy\n",
    "    plt.subplot(1, 3, 2)\n",
    "    plt.plot(history['val_accuracy'], label='Accuracy')\n",
    "    plt.title('Validation Accuracy')\n",
    "    plt.xlabel('Epochs')\n",
    "    plt.ylabel('Accuracy')\n",
    "    \n",
    "    # Plot validation AUC\n",
    "    plt.subplot(1, 3, 3)\n",
    "    plt.plot(history['val_auc'], label='AUC')\n",
    "    plt.title('Validation AUC')\n",
    "    plt.xlabel('Epochs')\n",
    "    plt.ylabel('AUC')\n",
    "    \n",
    "    plt.tight_layout()\n",
    "    plt.show()\n",
    "\n",
    "# Main function\n",
    "def main():\n",
    "    set_seed(42)\n",
    "    print(\"Loading data...\")\n",
    "    X, _ = load_all_files(DATA_DIR)\n",
    "    y = load_labels(LABEL_PATH)\n",
    "    \n",
    "    print(\"Original data shape:\", X.shape)\n",
    "    \n",
    "    # Normalize\n",
    "    X = (X - X.mean(axis=(0, 2), keepdims=True)) / (X.std(axis=(0, 2), keepdims=True) + 1e-6)\n",
    "    \n",
    "    # Extract features\n",
    "    X_features = preprocess_data(X)\n",
    "    \n",
    "    # Feature selection\n",
    "    X_selected, selected_indices, selector = feature_selection(X_features, y, threshold='median')\n",
    "    \n",
    "    # Print class distribution\n",
    "    print(\"Class distribution:\")\n",
    "    unique, counts = np.unique(y, return_counts=True)\n",
    "    for value, count in zip(unique, counts):\n",
    "        print(f\"Class {int(value)}: {count} ({count/len(y)*100:.2f}%)\")\n",
    "    \n",
    "    # Split the data\n",
    "    X_train, X_test, y_train, y_test = train_test_split(\n",
    "        X_selected, y, test_size=0.2, random_state=42, stratify=y\n",
    "    )\n",
    "    \n",
    "    # Train the model\n",
    "    print(\"\\nTraining and evaluating initial model...\")\n",
    "    model, history, metrics = train_model(\n",
    "        X_train, y_train, X_test, y_test,\n",
    "        hidden_sizes=[512, 256, 128],\n",
    "        dropout_rate=0.4,\n",
    "        lr=0.0005,\n",
    "        batch_size=16,\n",
    "        weight_decay=1e-4,\n",
    "        patience=15\n",
    "    )\n",
    "    \n",
    "    # Plot training history\n",
    "    plot_history(history)\n",
    "    \n",
    "    # Train final model using cross-validation\n",
    "    best_params = {\n",
    "        'hidden_sizes': [512, 256, 128],\n",
    "        'dropout_rate': 0.4,\n",
    "        'lr': 0.0005,\n",
    "        'batch_size': 16,\n",
    "        'weight_decay': 1e-4,\n",
    "        'patience': 15\n",
    "    }\n",
    "    \n",
    "    final_model, cv_metrics = train_final_model(X_selected, y, best_params, k_folds=5)\n",
    "    \n",
    "    # Save the final model\n",
    "    torch.save({\n",
    "        'model_state_dict': final_model.state_dict(),\n",
    "        'feature_selector': selector,  # Save feature selector to apply same transformation\n",
    "        'model_params': best_params,\n",
    "        'metrics': cv_metrics,\n",
    "        'input_shape': X_selected.shape[1]\n",
    "    }, 'parkinson_classifier_final.pth')\n",
    "    \n",
    "    print(\"\\nFinal model saved as 'parkinson_classifier_final.pth'\")\n",
    "    print(\"\\nDone!\")\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    main()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "919ffa8b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-14T11:26:04.220308Z",
     "iopub.status.busy": "2025-05-14T11:26:04.219810Z",
     "iopub.status.idle": "2025-05-14T11:26:04.752033Z",
     "shell.execute_reply": "2025-05-14T11:26:04.750905Z"
    },
    "papermill": {
     "duration": 0.55211,
     "end_time": "2025-05-14T11:26:04.753517",
     "exception": false,
     "start_time": "2025-05-14T11:26:04.201407",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/100 | Train Loss: 0.7020 | Train Acc: 0.4733 | Val Loss: 0.6918 | Val Acc: 0.5319\n",
      "Epoch 2/100 | Train Loss: 0.6908 | Train Acc: 0.5765 | Val Loss: 0.6848 | Val Acc: 0.5745\n",
      "Epoch 3/100 | Train Loss: 0.6742 | Train Acc: 0.6690 | Val Loss: 0.6786 | Val Acc: 0.6064\n",
      "Epoch 4/100 | Train Loss: 0.6634 | Train Acc: 0.6726 | Val Loss: 0.6732 | Val Acc: 0.6383\n",
      "Epoch 5/100 | Train Loss: 0.6533 | Train Acc: 0.7402 | Val Loss: 0.6686 | Val Acc: 0.6596\n",
      "Epoch 6/100 | Train Loss: 0.6421 | Train Acc: 0.7260 | Val Loss: 0.6647 | Val Acc: 0.6702\n",
      "Epoch 7/100 | Train Loss: 0.6328 | Train Acc: 0.7544 | Val Loss: 0.6611 | Val Acc: 0.6702\n",
      "Epoch 8/100 | Train Loss: 0.6217 | Train Acc: 0.7616 | Val Loss: 0.6579 | Val Acc: 0.6702\n",
      "Epoch 9/100 | Train Loss: 0.6152 | Train Acc: 0.7544 | Val Loss: 0.6553 | Val Acc: 0.6702\n",
      "Epoch 10/100 | Train Loss: 0.6035 | Train Acc: 0.7438 | Val Loss: 0.6530 | Val Acc: 0.6702\n",
      "Epoch 11/100 | Train Loss: 0.5943 | Train Acc: 0.7473 | Val Loss: 0.6512 | Val Acc: 0.6702\n",
      "Epoch 12/100 | Train Loss: 0.5875 | Train Acc: 0.7331 | Val Loss: 0.6498 | Val Acc: 0.6702\n",
      "Epoch 13/100 | Train Loss: 0.5813 | Train Acc: 0.7509 | Val Loss: 0.6489 | Val Acc: 0.6809\n",
      "Epoch 14/100 | Train Loss: 0.5677 | Train Acc: 0.7509 | Val Loss: 0.6485 | Val Acc: 0.6702\n",
      "Epoch 15/100 | Train Loss: 0.5611 | Train Acc: 0.7473 | Val Loss: 0.6488 | Val Acc: 0.6596\n",
      "Epoch 16/100 | Train Loss: 0.5503 | Train Acc: 0.7616 | Val Loss: 0.6496 | Val Acc: 0.6489\n",
      "Epoch 17/100 | Train Loss: 0.5426 | Train Acc: 0.7758 | Val Loss: 0.6509 | Val Acc: 0.6383\n",
      "Epoch 18/100 | Train Loss: 0.5414 | Train Acc: 0.7616 | Val Loss: 0.6526 | Val Acc: 0.6383\n",
      "Epoch 19/100 | Train Loss: 0.5303 | Train Acc: 0.7722 | Val Loss: 0.6548 | Val Acc: 0.6383\n",
      "Epoch 20/100 | Train Loss: 0.5270 | Train Acc: 0.7722 | Val Loss: 0.6570 | Val Acc: 0.6489\n",
      "Epoch 21/100 | Train Loss: 0.5153 | Train Acc: 0.7829 | Val Loss: 0.6594 | Val Acc: 0.6489\n",
      "Epoch 22/100 | Train Loss: 0.5162 | Train Acc: 0.7687 | Val Loss: 0.6617 | Val Acc: 0.6489\n",
      "Epoch 23/100 | Train Loss: 0.5129 | Train Acc: 0.7758 | Val Loss: 0.6637 | Val Acc: 0.6383\n",
      "Epoch 24/100 | Train Loss: 0.5077 | Train Acc: 0.7651 | Val Loss: 0.6656 | Val Acc: 0.6489\n",
      "\n",
      "Early stopping at epoch 24\n",
      "\n",
      "Test Set Evaluation:\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "         0.0       0.70      0.66      0.68        35\n",
      "         1.0       0.80      0.83      0.82        59\n",
      "\n",
      "    accuracy                           0.77        94\n",
      "   macro avg       0.75      0.74      0.75        94\n",
      "weighted avg       0.76      0.77      0.76        94\n",
      "\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1200x500 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training Set Evaluation:\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "         0.0       0.78      0.68      0.73       121\n",
      "         1.0       0.78      0.86      0.82       160\n",
      "\n",
      "    accuracy                           0.78       281\n",
      "   macro avg       0.78      0.77      0.77       281\n",
      "weighted avg       0.78      0.78      0.78       281\n",
      "\n"
     ]
    }
   ],
   "source": [
    "#model 3\n",
    "import torch\n",
    "import torch.nn as nn\n",
    "import torch.optim as optim\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from sklearn.metrics import classification_report\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Load cleaned data\n",
    "df = pd.read_csv(\"/kaggle/input/clean-questionnaire-data/clean_questionnaire_data.csv\")\n",
    "X = df.drop(columns=[\"target\"]).values\n",
    "y = df[\"target\"].values\n",
    "\n",
    "# Split into train, validation, and test sets\n",
    "X_temp, X_test, y_temp, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
    "X_train, X_val, y_train, y_val = train_test_split(X_temp, y_temp, test_size=0.25, random_state=42)  # 0.25 * 0.8 = 0.2\n",
    "\n",
    "# Scale data\n",
    "scaler = StandardScaler()\n",
    "X_train = scaler.fit_transform(X_train)\n",
    "X_val = scaler.transform(X_val)\n",
    "X_test = scaler.transform(X_test)\n",
    "\n",
    "# Convert to PyTorch tensors\n",
    "X_train_tensor = torch.tensor(X_train, dtype=torch.float32)\n",
    "y_train_tensor = torch.tensor(y_train, dtype=torch.float32).view(-1, 1)\n",
    "X_val_tensor = torch.tensor(X_val, dtype=torch.float32)\n",
    "y_val_tensor = torch.tensor(y_val, dtype=torch.float32).view(-1, 1)\n",
    "X_test_tensor = torch.tensor(X_test, dtype=torch.float32)\n",
    "y_test_tensor = torch.tensor(y_test, dtype=torch.float32).view(-1, 1)\n",
    "\n",
    "# Define combined neural network (Model 1 architecture + Model 2 logic)\n",
    "class QuestionnaireNN(nn.Module):\n",
    "    def __init__(self):\n",
    "        super().__init__()\n",
    "        self.model = nn.Sequential(\n",
    "            nn.Linear(X_train.shape[1], 128),\n",
    "            nn.ReLU(),\n",
    "            nn.Dropout(0.2),\n",
    "            nn.Linear(128, 64),\n",
    "            nn.ReLU(),\n",
    "            nn.Linear(64, 1),\n",
    "            nn.Sigmoid()\n",
    "        )\n",
    "\n",
    "    def forward(self, x):\n",
    "        return self.model(x)\n",
    "\n",
    "# Initialize model, loss, optimizer\n",
    "model = QuestionnaireNN()\n",
    "criterion = nn.BCELoss()\n",
    "optimizer = optim.Adam(model.parameters(), lr=0.001)\n",
    "\n",
    "# Training settings\n",
    "num_epochs = 100\n",
    "early_stop_patience = 10\n",
    "best_val_loss = np.inf\n",
    "epochs_no_improve = 0\n",
    "\n",
    "train_losses = []\n",
    "val_losses = []\n",
    "train_accuracies = []\n",
    "val_accuracies = []\n",
    "\n",
    "# Training loop with early stopping\n",
    "for epoch in range(num_epochs):\n",
    "    model.train()\n",
    "    optimizer.zero_grad()\n",
    "    outputs = model(X_train_tensor)\n",
    "    loss = criterion(outputs, y_train_tensor)\n",
    "    loss.backward()\n",
    "    optimizer.step()\n",
    "\n",
    "    # Compute train accuracy\n",
    "    train_preds = outputs.round()\n",
    "    train_acc = (train_preds == y_train_tensor).float().mean().item()\n",
    "\n",
    "    # Validation\n",
    "    model.eval()\n",
    "    with torch.no_grad():\n",
    "        val_outputs = model(X_val_tensor)\n",
    "        val_loss = criterion(val_outputs, y_val_tensor)\n",
    "        val_preds = val_outputs.round()\n",
    "        val_acc = (val_preds == y_val_tensor).float().mean().item()\n",
    "\n",
    "    # Save metrics\n",
    "    train_losses.append(loss.item())\n",
    "    val_losses.append(val_loss.item())\n",
    "    train_accuracies.append(train_acc)\n",
    "    val_accuracies.append(val_acc)\n",
    "\n",
    "    # Print progress\n",
    "    print(f\"Epoch {epoch+1}/{num_epochs} | Train Loss: {loss.item():.4f} | Train Acc: {train_acc:.4f} | Val Loss: {val_loss.item():.4f} | Val Acc: {val_acc:.4f}\")\n",
    "\n",
    "    # Early stopping logic\n",
    "    if val_loss.item() < best_val_loss:\n",
    "        best_val_loss = val_loss.item()\n",
    "        epochs_no_improve = 0\n",
    "        best_model_state = model.state_dict()\n",
    "    else:\n",
    "        epochs_no_improve += 1\n",
    "        if epochs_no_improve >= early_stop_patience:\n",
    "            print(f\"\\nEarly stopping at epoch {epoch+1}\")\n",
    "            model.load_state_dict(best_model_state)\n",
    "            break\n",
    "\n",
    "# Final Evaluation on Test Set\n",
    "model.eval()\n",
    "with torch.no_grad():\n",
    "    test_preds = model(X_test_tensor).round()\n",
    "    print(\"\\nTest Set Evaluation:\")\n",
    "    print(classification_report(y_test_tensor.numpy(), test_preds.numpy()))\n",
    "\n",
    "# Plot loss and accuracy over epochs\n",
    "epochs_range = range(1, len(train_losses) + 1)\n",
    "plt.figure(figsize=(12, 5))\n",
    "\n",
    "plt.subplot(1, 2, 1)\n",
    "plt.plot(epochs_range, train_losses, label=\"Train Loss\")\n",
    "plt.plot(epochs_range, val_losses, label=\"Val Loss\")\n",
    "plt.xlabel(\"Epoch\")\n",
    "plt.ylabel(\"Loss\")\n",
    "plt.title(\"Loss Over Epochs\")\n",
    "plt.legend()\n",
    "\n",
    "plt.subplot(1, 2, 2)\n",
    "plt.plot(epochs_range, train_accuracies, label=\"Train Accuracy\")\n",
    "plt.plot(epochs_range, val_accuracies, label=\"Val Accuracy\")\n",
    "plt.xlabel(\"Epoch\")\n",
    "plt.ylabel(\"Accuracy\")\n",
    "plt.title(\"Accuracy Over Epochs\")\n",
    "plt.legend()\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.show()\n",
    "\n",
    "# Evaluation on Training Set\n",
    "model.eval()\n",
    "with torch.no_grad():\n",
    "    train_preds = model(X_train_tensor).round()\n",
    "    print(\"Training Set Evaluation:\")\n",
    "    print(classification_report(y_train_tensor, train_preds))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e88e9947",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-14T10:44:50.368119Z",
     "iopub.status.busy": "2025-05-14T10:44:50.367778Z",
     "iopub.status.idle": "2025-05-14T10:44:50.375553Z",
     "shell.execute_reply": "2025-05-14T10:44:50.374708Z",
     "shell.execute_reply.started": "2025-05-14T10:44:50.368097Z"
    },
    "papermill": {
     "duration": 0.018327,
     "end_time": "2025-05-14T11:26:04.790587",
     "exception": false,
     "start_time": "2025-05-14T11:26:04.772260",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "dc1bbfaf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-14T10:45:09.805102Z",
     "iopub.status.busy": "2025-05-14T10:45:09.804515Z",
     "iopub.status.idle": "2025-05-14T10:45:09.812371Z",
     "shell.execute_reply": "2025-05-14T10:45:09.811468Z",
     "shell.execute_reply.started": "2025-05-14T10:45:09.805076Z"
    },
    "papermill": {
     "duration": 0.018434,
     "end_time": "2025-05-14T11:26:04.827999",
     "exception": false,
     "start_time": "2025-05-14T11:26:04.809565",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5c6fa2d7",
   "metadata": {
    "papermill": {
     "duration": 0.018148,
     "end_time": "2025-05-14T11:26:04.864692",
     "exception": false,
     "start_time": "2025-05-14T11:26:04.846544",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "gpu",
   "dataSources": [
    {
     "datasetId": 7353775,
     "sourceId": 11715385,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 7353781,
     "sourceId": 11715394,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 7415946,
     "sourceId": 11808148,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 31012,
   "isGpuEnabled": true,
   "isInternetEnabled": false,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.11"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 158.777939,
   "end_time": "2025-05-14T11:26:07.642342",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-05-14T11:23:28.864403",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
